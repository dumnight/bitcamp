<?xml version="1.0" encoding="UTF-8"?>
<!-- JdbcTestMapper.xml 파일
     => "jdbc_test" 테이블을 다루는 SQL문이 들어 있다.
  -->
  
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- DAO 객체를 자동으로 생성하려면,
     namespace의 값이 인터페이스 이름과 같아야 한다. -->
<mapper namespace="java100.app.dao.MemberDao">

    <resultMap type="member" id="memberMap">
        <id column="no" property="no"/>
        <result column="pwd" property="password"/>
        <result column="regdt" property="regDate"/>
    </resultMap>

    <sql id="select1">
        select
            no, name, email, regdt
    </sql>

    <!-- select를 실행할 때 정렬 값을 입력 받기 위해 
         Map 객체를 파라미터로 받는다.  -->
    <select id="findAll" resultMap="memberMap" parameterType="map">
        <include refid="select1"/>
        from ex_memb    

        <if test="words != null">
            <where>
                name in 
                <foreach collection="words" item="word" 
                         open="(" close=")" separator=",">
                    #{word}
                </foreach>
                or email in 
                <foreach collection="words" item="word" 
                         open="(" close=")" separator=",">
                    #{word}
                </foreach>
            </where>
        </if>
        
        <!-- 정렬 조건에 따라 SQL문을 변경한다.-->
        order by 
        <choose>
            <when test="orderColumn == 'email' and align == 'asc'">
                email asc
            </when>
            <when test="orderColumn == 'email' and align == 'desc'">
                email desc
            </when>
            <when test="orderColumn == 'regdt' and align == 'asc'">
                regdt asc
            </when>
            <when test="orderColumn == 'regdt' and align == 'desc'">
                regdt desc
            </when>
            <when test="orderColumn == 'name' and align == 'desc'">
                name desc
            </when>
            <otherwise>
                name asc
            </otherwise>
        </choose>
        
    </select>
    
    <insert id="insert" parameterType="member">
        insert into ex_memb(name,email,pwd,regdt)
        values(#{name},#{email},password(#{password}),now())
    </insert>
    
    <update id="update" parameterType="member">
        update ex_memb set 
            name=#{name}, 
            email=#{email},
            pwd=password(#{password}) 
        where no=#{no}
    </update>

    <delete id="delete" parameterType="int">
        delete from ex_memb where no=#{value}
    </delete>
    
    <select id="findByNo" resultMap="memberMap" parameterType="int">
       <include refid="select1"/> 
        from ex_memb
        where no=#{value}
    </select>
</mapper>  









